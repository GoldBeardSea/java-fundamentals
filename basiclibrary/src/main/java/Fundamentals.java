/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import java.io.File;
import java.io.FileNotFoundException;
import java.util.*;

public class Fundamentals {
    public boolean someLibraryMethod() {
        return true;
    }

    public static int[] roll(int numThrows) {
        int[] rollArray = new int[numThrows];
        int i = 0;

        while (i < rollArray.length) {
            int dieRoll = (int) Math.ceil(6 * Math.random());
            rollArray[i] = dieRoll;
            i++;
        }
        return rollArray;
    }

    public static boolean containsDuplicates(int[] array) {
        Set<Integer> test = new HashSet<>();
        for (int i : array) {
            if (test.contains(i))
                return true;
            test.add(i);
        }
        return false;
    }

    public static int averageArray(int[] array) {
        int averageHolder = 0;
        for (int i = 0; i < array.length; i++) {
            averageHolder = averageHolder + array[i];
        }
        averageHolder = averageHolder / array.length;
        return averageHolder;
    }

    public static int averageOfArrays(int[][] weeklyMonthTemperatures) {
        int averageHolder = 0;
        int minVal = 1000;
        int index = 0;
        for (int row = 0; row < weeklyMonthTemperatures.length; row++) {
            averageHolder = 0;
            for (int col = 0; col < weeklyMonthTemperatures[row].length; col++) {
                averageHolder = averageHolder + weeklyMonthTemperatures[row][col];
            }
            averageHolder = averageHolder / weeklyMonthTemperatures[row].length;
            if (averageHolder < minVal) {
                minVal = averageHolder;
                index = row;
            }

        }
        return index;
    }

    public static String analyzeWeather(int[][] weeklyMonthTemperatures) {
        int maxHigh = 0;
        Set<Integer> seen = new HashSet<>();
        int maxLow = 100;
        int temp = 0;
        StringBuilder resultString = new StringBuilder();
        for (int row = 0; row < weeklyMonthTemperatures.length; row++) {

            for (int col = 0; col < weeklyMonthTemperatures[row].length; col++) {
                temp = temp + weeklyMonthTemperatures[row][col];
                if (temp > maxHigh) {
                    maxHigh = temp;

                }
                if (temp < maxLow) {
                    maxLow = temp;
                }
                seen.add(temp);
                temp = 0;
            }
        }
        resultString.append("High: " + maxHigh + "\n");
        resultString.append("Low: " + maxLow + "\n");

        for (int i = maxLow; i < maxHigh; i++) {
            int seenCheck = i;
            if (!seen.contains(seenCheck)) {
                resultString.append("Never saw temperature: " + i + "\n");
            }
        }

        return resultString.toString();
    }

    public static String tally(List<String> votes) {
        HashMap<String, Integer> votesHash = new HashMap<>();

        for (String name : votes) {
            votesHash.put(name, votesHash.getOrDefault(name, 0) + 1);
        }

        String winner = "";
        int maxVotes = 0;
        // hackey work around
        for (String name : votes) {
            if (votesHash.get(name) > maxVotes) {
                winner = name;
                maxVotes = votesHash.get(name);
            }
        }
        return winner + " received the most votes!";
    }

    public static void linterJS(String fileName) {
//        String fileName = "//Users/ttb/codefellows/401/java-fundamentals/gates.js";
        File file = new File(fileName);

        try (Scanner scanner = new Scanner(file)) {
            String line;
            int lineNum = 0;
            while (scanner.hasNextLine()) {
                line = scanner.nextLine();
                lineNum++;
                if (!line.contains(";")) {
                    if (!line.contains("}") && !line.contains("{") && !line.contains("}") && !line.contains("if") && !line.isEmpty() && !line.contains("else")) {
                        System.out.println("Line " + lineNum + " is Missing SemiColon " );
                    }
                }
            }
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        linterJS("//Users/ttb/codefellows/401/java-fundamentals/gates.js");
    }
}

